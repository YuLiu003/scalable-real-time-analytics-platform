apiVersion: apps/v1
kind: Deployment
metadata:
  name: gin-api
  namespace: analytics-platform
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gin-api
  template:
    metadata:
      labels:
        app: gin-api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      containers:
      - name: gin-api
        image: gin-api:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        env:
        - name: KAFKA_BROKER
          valueFrom:
            configMapKeyRef:
              name: platform-config
              key: KAFKA_BROKER
        - name: KAFKA_TOPIC
          valueFrom:
            configMapKeyRef:
              name: platform-config
              key: KAFKA_TOPIC
        - name: API_KEY_1
          valueFrom:
            secretKeyRef:
              name: api-keys
              key: API_KEY_1
        - name: API_KEY_2
          valueFrom:
            secretKeyRef:
              name: api-keys
              key: API_KEY_2
        - name: GIN_MODE
          value: "release"
        - name: PORT
          value: "8080"
        - name: ENABLE_TENANT_ISOLATION
          value: "true"
        - name: TENANT_API_KEY_MAP
          value: '{"test-key-1":"tenant1","test-key-2":"tenant2"}'
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
          requests:
            cpu: 100m
            memory: 128Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false 