from flask import Flask, request, jsonify
import sys
import os
import json
import uuid
from datetime import datetime
import logging

# Add parent directory to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Import tenant model
from src.tenant_model import Tenant

# Import Kubernetes manager if in Kubernetes mode
if os.environ.get('PLATFORM_MODE') == 'kubernetes':
    from kubernetes.namespace_manager import K8sTenantManager
    k8s_manager = K8sTenantManager()

app = Flask(__name__)

# In-memory storage for development/testing
tenants = {}
tenant_api_keys = {}

@app.route('/api/tenants', methods=['GET'])
def list_tenants():
    """List all tenants."""
    return jsonify({
        "tenants": [
            {
                "tenant_id": t.tenant_id,
                "name": t.name,
                "plan": t.plan,
                "created_at": t.created_at.isoformat()
            } for t in tenants.values()
        ]
    })

@app.route('/api/tenants/<tenant_id>', methods=['GET'])
def get_tenant(tenant_id):
    """Get tenant details by ID."""
    tenant = tenants.get(tenant_id)
    if not tenant:
        return jsonify({"error": "Tenant not found"}), 404
    
    return jsonify({
        "tenant_id": tenant.tenant_id,
        "name": tenant.name,
        "plan": tenant.plan,
        "resource_limits": tenant.resource_limits,
        "created_at": tenant.created_at.isoformat()
    })

@app.route('/api/tenants', methods=['POST'])
def create_tenant():
    """Create a new tenant."""
    data = request.json
    tenant_id = data.get('tenant_id')
    if not tenant_id:
        # Generate a tenant ID if not provided
        tenant_id = f"t-{uuid.uuid4().hex[:8]}"
    
    name = data.get('name')
    plan = data.get('plan', 'basic')
    
    # Validate input
    if not name:
        return jsonify({"error": "Tenant name is required"}), 400
        
    # Check if tenant already exists
    if tenant_id in tenants:
        return jsonify({"error": "Tenant ID already exists"}), 409
    
    # Create tenant
    tenant = Tenant(tenant_id, name, plan)
    tenants[tenant_id] = tenant
    
    # Generate API key
    api_key = f"tk_{tenant_id}_{uuid.uuid4().hex[:16]}"
    tenant_api_keys[tenant_id] = api_key
    
    # Create Kubernetes resources if in Kubernetes mode
    if os.environ.get('PLATFORM_MODE') == 'kubernetes':
        try:
            k8s_result = k8s_manager.create_tenant(tenant_id, plan)
            # Use the API key generated by Kubernetes
            api_key = k8s_result["api_key"]
            tenant_api_keys[tenant_id] = api_key
        except Exception as e:
            logger.error(f"Failed to create Kubernetes resources: {e}")
            # Continue anyway to return the tenant, with a warning
            return jsonify({
                "tenant_id": tenant.tenant_id,
                "name": tenant.name,
                "plan": tenant.plan,
                "api_key": api_key,
                "created_at": tenant.created_at.isoformat(),
                "warning": "Tenant created but Kubernetes resources may not be complete."
            }), 201
    
    return jsonify({
        "tenant_id": tenant.tenant_id,
        "name": tenant.name,
        "plan": tenant.plan,
        "api_key": api_key,
        "created_at": tenant.created_at.isoformat(),
        "status": "created"
    }), 201

@app.route('/api/tenants/<tenant_id>', methods=['DELETE'])
def delete_tenant(tenant_id):
    """Delete a tenant."""
    if tenant_id not in tenants:
        return jsonify({"error": "Tenant not found"}), 404
    
    # Delete tenant from local storage
    del tenants[tenant_id]
    if tenant_id in tenant_api_keys:
        del tenant_api_keys[tenant_id]
    
    # Delete Kubernetes resources if in Kubernetes mode
    if os.environ.get('PLATFORM_MODE') == 'kubernetes':
        try:
            # This would be where you implement Kubernetes resource cleanup
            pass
        except Exception as e:
            logger.error(f"Failed to delete Kubernetes resources: {e}")
            return jsonify({
                "status": "partial_deletion",
                "tenant_id": tenant_id,
                "warning": "Tenant deleted from registry but Kubernetes resources may remain."
            })
    
    return jsonify({"status": "deleted", "tenant_id": tenant_id})

@app.route('/api/tenants/<tenant_id>/api-key', methods=['GET'])
def get_api_key(tenant_id):
    """Get API key for a tenant."""
    if tenant_id not in tenants:
        return jsonify({"error": "Tenant not found"}), 404
    
    api_key = tenant_api_keys.get(tenant_id, "No API key found")
    
    return jsonify({
        "tenant_id": tenant_id,
        "api_key": api_key
    })

@app.route('/api/tenants/<tenant_id>/api-key', methods=['POST'])
def regenerate_api_key(tenant_id):
    """Regenerate API key for a tenant."""
    if tenant_id not in tenants:
        return jsonify({"error": "Tenant not found"}), 404
    
    # Generate new API key
    api_key = f"tk_{tenant_id}_{uuid.uuid4().hex[:16]}"
    tenant_api_keys[tenant_id] = api_key
    
    return jsonify({
        "tenant_id": tenant_id,
        "api_key": api_key
    })

if __name__ == '__main__':
    # Create default tenants for testing
    tenants['tenant1'] = Tenant('tenant1', 'Demo Corp', 'premium')
    tenant_api_keys['tenant1'] = "test-key-1"
    
    tenants['tenant2'] = Tenant('tenant2', 'Test Inc', 'basic')
    tenant_api_keys['tenant2'] = "test-key-2"
    
    # Print tenant info for debugging
    print("Created default tenants:")
    for tenant_id, tenant in tenants.items():
        print(f"- {tenant_id}: {tenant.name} ({tenant.plan}) - API Key: {tenant_api_keys[tenant_id]}")
    
    app.run(host='0.0.0.0', port=5010, debug=True)