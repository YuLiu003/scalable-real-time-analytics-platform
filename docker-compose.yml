version: '3.8'

services:
  secure-api:
    build:
      context: ./flask-api
      dockerfile: Dockerfile
    image: flask-api:latest
    ports:
      - "5000:5000"
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=sensor-data
      - API_KEY_1=${API_KEY_1:-test-key-1}
      - API_KEY_2=${API_KEY_2:-test-key-2}
      - TENANT_API_KEY_MAP={"test-key-1":"tenant1","test-key-2":"tenant2"}
      - ENABLE_TENANT_ISOLATION=true
    depends_on:
      - kafka
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

  tenant-mgmt:
    build:
      context: ./platform/tenant-management
      dockerfile: Dockerfile
    image: tenant-management:latest
    ports:
      - "5010:5010"
    environment:
      - PLATFORM_MODE=docker
    volumes:
      - ./platform/tenant-management:/app
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5010/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

  data-ingestion:
    build:
      context: ./data-ingestion
      dockerfile: Dockerfile
    image: data-ingestion:latest
    ports:
      - "5001:5000"
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=sensor-data
      - ENABLE_TENANT_ISOLATION=true
    depends_on:
      - kafka
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

  processing-engine:
    build:
      context: ./processing-engine
      dockerfile: Dockerfile
    image: processing-engine:latest
    ports:
      - "5002:5001"
    depends_on:
      - data-ingestion
      - kafka
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

  storage-layer:
    build:
      context: ./storage-layer
      dockerfile: Dockerfile
    image: storage-layer:latest
    ports:
      - "5003:5002"
    depends_on:
      - processing-engine
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

  visualization:
    build:
      context: ./visualization
      dockerfile: Dockerfile
    image: visualization:latest
    ports:
      - "5004:5003"
    depends_on:
      - storage-layer
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

  kafka:
    image: bitnami/kafka:3.4.1
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_KRAFT_CLUSTER_ID=${KAFKA_KRAFT_CLUSTER_ID:-$(openssl rand -hex 11)}
    volumes:
      - kafka-data:/bitnami/kafka
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  kafka-data:
    driver: local

networks:
  kafka-network:
    driver: bridge