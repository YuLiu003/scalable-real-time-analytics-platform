version: '3.8'

services:
  tenant-mgmt-go:
    build:
      context: ./tenant-management-go
      dockerfile: Dockerfile
    image: tenant-management-go:latest
    ports:
      - "5010:5010"
    environment:
      - PLATFORM_MODE=docker
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5010/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

  data-ingestion-go:
    build:
      context: ./data-ingestion-go
      dockerfile: Dockerfile
    image: data-ingestion-go:latest
    ports:
      - "5001:5000"
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=sensor-data
      - ENABLE_TENANT_ISOLATION=true
      # Use environment variables for API keys
      - API_KEY_1=${API_KEY_1:-test-key-1}
      - API_KEY_2=${API_KEY_2:-test-key-2}
    depends_on:
      - kafka
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

  clean-ingestion-go:
    build:
      context: ./clean-ingestion-go
      dockerfile: Dockerfile
    image: clean-ingestion-go:latest
    ports:
      - "5002:5000"
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=sensor-data-clean
    depends_on:
      - kafka
      - data-ingestion-go
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

  processing-engine-go:
    build:
      context: ./processing-engine-go
      dockerfile: Dockerfile
    image: processing-engine-go:latest
    ports:
      - "5003:8000"
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_INPUT_TOPIC=sensor-data-clean
      - KAFKA_OUTPUT_TOPIC=processed-data
      - CONSUMER_GROUP=processing-engine-group
    depends_on:
      - clean-ingestion-go
      - kafka
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

  storage-layer-go:
    build:
      context: ./storage-layer-go
      dockerfile: Dockerfile
    image: storage-layer-go:latest
    ports:
      - "5004:5002"
    environment:
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC=processed-data
    depends_on:
      - processing-engine-go
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

  visualization-go:
    build:
      context: ./visualization-go
      dockerfile: Dockerfile
    image: visualization-go:latest
    ports:
      - "5005:5003"
    environment:
      - DATA_SERVICE_URL=http://storage-layer-go:5002
    depends_on:
      - storage-layer-go
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD-SHELL", "echo stat | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

volumes:
  kafka-data:
    driver: local
  zookeeper-data:
    driver: local
  zookeeper-logs:
    driver: local

networks:
  kafka-network:
    driver: bridge