name: CI Pipeline

on:
  push:
    branches: [ main, feature/*, fix/* ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Build and Test Data Ingestion
        if: hashFiles('data-ingestion-go/go.mod') != ''
        working-directory: ./data-ingestion-go
        run: |
          go mod download
          go build -v ./...
          go test -v ./...

      - name: Build and Test Clean Ingestion
        if: hashFiles('clean-ingestion-go/go.mod') != ''
        working-directory: ./clean-ingestion-go
        run: |
          go mod download
          go build -v ./...
          go test -v ./...

      - name: Build and Test Processing Engine
        if: hashFiles('processing-engine-go/go.mod') != ''
        working-directory: ./processing-engine-go
        run: |
          go mod download
          go build -v ./...
          go test -v ./...

      - name: Build and Test Storage Layer
        if: hashFiles('storage-layer-go/go.mod') != ''
        working-directory: ./storage-layer-go
        run: |
          go mod download
          go build -v ./...
          go test -v ./...

      - name: Build and Test Visualization
        if: hashFiles('visualization-go/go.mod') != ''
        working-directory: ./visualization-go
        run: |
          go mod download
          go build -v ./...
          go test -v ./...

      - name: Build and Test Tenant Management
        if: hashFiles('tenant-management-go/go.mod') != ''
        working-directory: ./tenant-management-go
        run: |
          go mod download
          go build -v ./...
          go test -v ./...

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - name: Make scripts executable
        run: |
          chmod +x scripts/*.sh

      - name: Run security checks
        run: |
          ./scripts/security-check.sh

      - name: Verify security score
        run: |
          SCORE=$(./scripts/security-check.sh | grep "Security Score:" | awk '{print $1}' | cut -d'/' -f1)
          if [ -z "$SCORE" ]; then
            echo "Could not determine security score"
            exit 1
          fi
          
          echo "Security Score: $SCORE"
          if [ "$SCORE" -lt "7" ]; then
            echo "Security score too low: $SCORE/9"
            exit 1
          fi
          
          echo "✅ Security check passed"

      - name: Run gosec security scanner
        uses: securego/gosec@master
        with:
          args: -exclude-dir=.git -exclude-dir=vendor ./...

  build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/feature/'))
    strategy:
      matrix:
        service: [data-ingestion-go, clean-ingestion-go, processing-engine-go, storage-layer-go, visualization-go, tenant-management-go]

    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Check service directory exists
        id: check_dir
        run: |
          if [ -d "${{ matrix.service }}" ]; then
            echo "dir_exists=true" >> $GITHUB_OUTPUT
          else
            echo "dir_exists=false" >> $GITHUB_OUTPUT
            echo "::warning::Service directory ${{ matrix.service }} does not exist."
          fi

      - name: Check Docker credentials
        id: check_docker_creds
        if: steps.check_dir.outputs.dir_exists == 'true'
        run: |
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_PASSWORD }}" ]; then
            echo "has_docker_creds=true" >> $GITHUB_OUTPUT
          else
            echo "has_docker_creds=false" >> $GITHUB_OUTPUT
            echo "::warning::Docker Hub credentials not found. Will build but not push image."
          fi

      - name: Login to Docker Hub
        if: steps.check_dir.outputs.dir_exists == 'true' && steps.check_docker_creds.outputs.has_docker_creds == 'true'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set default Docker repository
        id: set_repo
        if: steps.check_dir.outputs.dir_exists == 'true'
        run: |
          if [ -n "${{ secrets.DOCKER_USERNAME }}" ]; then
            echo "repo=${{ secrets.DOCKER_USERNAME }}/${{ matrix.service }}" >> $GITHUB_OUTPUT
          else
            # Use a placeholder if no Docker username is provided
            echo "repo=localimage/${{ matrix.service }}" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata
        id: meta
        if: steps.check_dir.outputs.dir_exists == 'true'
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.set_repo.outputs.repo }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=
            latest

      - name: Build and push
        if: steps.check_dir.outputs.dir_exists == 'true'
        uses: docker/build-push-action@v4
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: ${{ steps.check_docker_creds.outputs.has_docker_creds == 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Scan Docker image for vulnerabilities
        if: steps.check_dir.outputs.dir_exists == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.set_repo.outputs.repo }}:latest
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Build summary (success with push)
        if: steps.check_dir.outputs.dir_exists == 'true' && steps.check_docker_creds.outputs.has_docker_creds == 'true'
        run: |
          echo "## Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Docker image built and pushed to ${{ steps.set_repo.outputs.repo }}" >> $GITHUB_STEP_SUMMARY

      - name: Build summary (success without push)
        if: steps.check_dir.outputs.dir_exists == 'true' && steps.check_docker_creds.outputs.has_docker_creds != 'true' 
        run: |
          echo "## Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ Docker image built but NOT pushed due to missing Docker Hub credentials" >> $GITHUB_STEP_SUMMARY
          echo "To push to Docker Hub, add DOCKER_USERNAME and DOCKER_PASSWORD secrets to your repository."
