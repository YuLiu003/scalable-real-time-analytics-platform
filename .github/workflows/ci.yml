name: CI Pipeline

on:
  push:
    branches: [ main, feature/*, fix/* ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Create directory if it doesn't exist
          mkdir -p flask-api/src
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          elif [ -f "flask-api/requirements.txt" ]; then
            pip install -r flask-api/requirements.txt
          else
            pip install pytest flask requests

      - name: Run unit tests
        run: |
          if [ -d "tests" ]; then
            pytest tests/
          elif [ -d "flask-api/tests" ]; then
            pytest flask-api/tests/
          else
            echo "No test directory found. Skipping unit tests."

  build:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/feature/'))
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Check if Dockerfile exists
        id: check_dockerfile
        run: |
          if [ -f "./Dockerfile" ]; then
            echo "dockerfile_path=./Dockerfile" >> $GITHUB_OUTPUT
          elif [ -f "./flask-api/Dockerfile" ]; then
            echo "dockerfile_path=./flask-api/Dockerfile" >> $GITHUB_OUTPUT
          else
            echo "dockerfile_path=" >> $GITHUB_OUTPUT
            echo "::warning::No Dockerfile found. Skipping Docker build."

      - name: Login to Docker Hub
        if: steps.check_dockerfile.outputs.dockerfile_path != ''
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        continue-on-error: true

      - name: Extract metadata
        if: steps.check_dockerfile.outputs.dockerfile_path != ''
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/secure-api
          tags: |
            type=ref,event=branch
            type=sha,prefix=
            latest

      - name: Build and push
        if: steps.check_dockerfile.outputs.dockerfile_path != ''
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ steps.check_dockerfile.outputs.dockerfile_path }}
          push: ${{ secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != '' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Make scripts executable
        run: |
          chmod +x scripts/*.sh

      - name: Run security checks
        run: |
          ./scripts/security-check.sh

      - name: Verify security score
        run: |
          SCORE=$(./scripts/security-check.sh | grep "Security Score:" | awk '{print $1}' | cut -d'/' -f1)
          if [ -z "$SCORE" ]; then
            echo "Could not determine security score"
            exit 1

          echo "Security Score: $SCORE"
          if [ "$SCORE" -lt "5" ]; then
            echo "Security score too low: $SCORE/6"
            exit 1

          echo "âœ… Security check passed"
