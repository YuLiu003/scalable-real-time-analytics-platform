name: Go Linting and Best Practices

on:
  push:
    branches: [ main, feature/*, fix/* ]
    paths:
      - '**.go'
      - '**/go.mod'
      - '**/go.sum'
  pull_request:
    branches: [ main ]
    paths:
      - '**.go'
      - '**/go.mod'
      - '**/go.sum'

jobs:
  golangci:
    name: Go Linting
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [data-ingestion-go, clean-ingestion-go, processing-engine-go, storage-layer-go, visualization-go, tenant-management-go]
    steps:
      - uses: actions/checkout@v3
      
      - name: Check service directory exists
        id: check_dir
        run: |
          if [ -d "${{ matrix.service }}" ] && [ -f "${{ matrix.service }}/go.mod" ]; then
            echo "dir_exists=true" >> $GITHUB_OUTPUT
          else
            echo "dir_exists=false" >> $GITHUB_OUTPUT
            echo "::warning::Service directory ${{ matrix.service }} does not exist or has no go.mod."
          fi

      - name: Set up Go
        if: steps.check_dir.outputs.dir_exists == 'true'
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: golangci-lint
        if: steps.check_dir.outputs.dir_exists == 'true'
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: ${{ matrix.service }}
          args: --timeout=5m

  go-mod-tidy:
    name: Check go.mod tidiness
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [data-ingestion-go, clean-ingestion-go, processing-engine-go, storage-layer-go, visualization-go, tenant-management-go]
    steps:
      - uses: actions/checkout@v3
      
      - name: Check service directory exists
        id: check_dir
        run: |
          if [ -d "${{ matrix.service }}" ] && [ -f "${{ matrix.service }}/go.mod" ]; then
            echo "dir_exists=true" >> $GITHUB_OUTPUT
          else
            echo "dir_exists=false" >> $GITHUB_OUTPUT
            echo "::warning::Service directory ${{ matrix.service }} does not exist or has no go.mod."
          fi

      - name: Set up Go
        if: steps.check_dir.outputs.dir_exists == 'true'
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Verify go.mod is tidy
        if: steps.check_dir.outputs.dir_exists == 'true'
        working-directory: ${{ matrix.service }}
        run: |
          go mod tidy
          if ! git diff --exit-code go.mod go.sum; then
            echo "::error::go.mod or go.sum is not tidy. Run 'go mod tidy' and commit the changes."
            exit 1
          fi

  go-vet:
    name: Go Vet Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [data-ingestion-go, clean-ingestion-go, processing-engine-go, storage-layer-go, visualization-go, tenant-management-go]
    steps:
      - uses: actions/checkout@v3
      
      - name: Check service directory exists
        id: check_dir
        run: |
          if [ -d "${{ matrix.service }}" ] && [ -f "${{ matrix.service }}/go.mod" ]; then
            echo "dir_exists=true" >> $GITHUB_OUTPUT
          else
            echo "dir_exists=false" >> $GITHUB_OUTPUT
            echo "::warning::Service directory ${{ matrix.service }} does not exist or has no go.mod."
          fi

      - name: Set up Go
        if: steps.check_dir.outputs.dir_exists == 'true'
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Run go vet
        if: steps.check_dir.outputs.dir_exists == 'true'
        working-directory: ${{ matrix.service }}
        run: |
          go vet ./...
          
  go-sec:
    name: Go Security Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: -exclude-dir=.git -exclude-dir=vendor ./... 