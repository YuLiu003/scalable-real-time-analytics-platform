name: Deploy Real-Time Analytics Platform

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    branches: [main]
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check required secrets
        id: check_secrets
        run: |
          if [ -n "${{ secrets.KUBE_CONFIG }}" ] && [ -n "${{ secrets.API_KEY_1 }}" ] && [ -n "${{ secrets.API_KEY_2 }}" ]; then
            echo "all_secrets_present=true" >> $GITHUB_OUTPUT
          else
            echo "all_secrets_present=false" >> $GITHUB_OUTPUT
            echo "::warning::Some required secrets are missing. Running in limited mode."
          fi

      - name: Deployment notification (limited mode)
        if: steps.check_secrets.outputs.all_secrets_present != 'true'
        run: |
          echo "Running deployment in limited mode."
          echo "To enable full deployment, please configure the following secrets:"
          echo "- KUBE_CONFIG (base64 encoded kubectl config)"
          echo "- API_KEY_1 (for API authentication)"
          echo "- API_KEY_2 (for API authentication)"
          exit 0

      - name: Set up Kubernetes
        if: steps.check_secrets.outputs.all_secrets_present == 'true'
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set up Helm
        if: steps.check_secrets.outputs.all_secrets_present == 'true'
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Configure kubectl
        if: steps.check_secrets.outputs.all_secrets_present == 'true'
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig
          chmod 600 kubeconfig
          export KUBECONFIG=$(pwd)/kubeconfig

      - name: Check kubectl configuration
        if: steps.check_secrets.outputs.all_secrets_present == 'true'
        run: |
          if ! kubectl get nodes &>/dev/null; then
            echo "::error::kubectl is not configured correctly. Exiting."
            exit 1
          fi
          echo "Kubernetes connection successful."

      - name: Check charts directory exists
        if: steps.check_secrets.outputs.all_secrets_present == 'true'
        id: check_charts
        run: |
          if [ -d "./charts/analytics-platform" ]; then
            echo "charts_exist=true" >> $GITHUB_OUTPUT
          else
            echo "charts_exist=false" >> $GITHUB_OUTPUT
            echo "::warning::Helm charts directory not found."
          fi

      - name: Update Kubernetes secrets
        if: steps.check_secrets.outputs.all_secrets_present == 'true'
        run: |
          kubectl create namespace analytics-platform --dry-run=client -o yaml | kubectl apply -f -
          
          # Create API keys secret securely
          kubectl create secret generic api-keys \
            --from-literal=test-key-1=${{ secrets.API_KEY_1 }} \
            --from-literal=test-key-2=${{ secrets.API_KEY_2 }} \
            -n analytics-platform \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy with Helm
        if: steps.check_secrets.outputs.all_secrets_present == 'true' && steps.check_charts.outputs.charts_exist == 'true'
        run: |
          helm upgrade --install analytics-platform ./charts/analytics-platform \
            --values ./charts/analytics-platform/values.yaml \
            --set secureApi.image.repository=${{ secrets.DOCKER_USERNAME }}/secure-api \
            --set secureApi.image.tag=latest \
            -n analytics-platform

      - name: Deploy with kubectl
        if: steps.check_secrets.outputs.all_secrets_present == 'true' && steps.check_charts.outputs.charts_exist != 'true'
        run: |
          echo "Helm charts not found, falling back to kubectl deployment."
          if [ -d "k8s" ]; then
            kubectl apply -f k8s/ -n analytics-platform
          else
            echo "::error::No k8s directory found for kubectl deployment."
            exit 1
          fi

      - name: Verify deployment
        if: steps.check_secrets.outputs.all_secrets_present == 'true'
        run: |
          # Check if each deployment exists before checking status
          for deployment in secure-api data-ingestion processing-engine storage-layer visualization; do
            if kubectl get deployment $deployment -n analytics-platform &>/dev/null; then
              echo "Waiting for deployment/$deployment to be ready..."
              kubectl rollout status deployment/$deployment -n analytics-platform --timeout=120s
            else
              echo "Warning: deployment/$deployment not found. Skipping status check."
            fi
          done

      - name: Run basic security test
        if: steps.check_secrets.outputs.all_secrets_present == 'true'
        run: |
          # Check if secure-api service exists
          if ! kubectl get svc secure-api-service -n analytics-platform &>/dev/null; then
            echo "Warning: secure-api-service not found. Skipping security tests."
            exit 0
          fi
          
          # Give services time to start
          echo "Waiting for services to be ready..."
          sleep 20
          
          # Set up port forwarding for testing
          echo "Setting up port forwarding..."
          kubectl port-forward svc/secure-api-service 8090:80 -n analytics-platform &
          PF_PID=$!
          sleep 5
          
          # Run a simple test to confirm authorization is working
          echo "Testing API without authentication..."
          RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            http://localhost:8090/api/data \
            -H "Content-Type: application/json" \
            -d '{"device_id": "test-001", "temperature": 25.5}' \
            --connect-timeout 5 \
            --max-time 10)
            
          if [ "$RESPONSE_CODE" = "401" ]; then
            echo "✅ Security verification successful: Got 401 without API key"
          else
            echo "⚠️ Security verification: Got $RESPONSE_CODE without API key (expected 401)"
          fi
          
          # Test with API key from secrets
          echo "Testing API with authentication..."
          RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            http://localhost:8090/api/data \
            -H "Content-Type: application/json" \
            -H "X-API-Key: ${{ secrets.API_KEY_1 }}" \
            -d '{"device_id": "test-001", "temperature": 25.5}' \
            --connect-timeout 5 \
            --max-time 10)
            
          if [ "$RESPONSE_CODE" = "200" ]; then
            echo "✅ API key authentication successful"
          else
            echo "⚠️ API key authentication: Got $RESPONSE_CODE with API key (expected 200)"
          fi
          
          # Clean up port forwarding
          kill $PF_PID